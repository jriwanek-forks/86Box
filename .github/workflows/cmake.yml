name: CMake

on:

  push:
    paths:
      - src/**
      - cmake/**
      - "**/CMakeLists.txt"
      - "CMakePresets.json"
      - .github/workflows/cmake.yml
      - vcpkg.json
      - "!**/Makefile*"

  pull_request:
    paths:
      - src/**
      - cmake/**
      - "**/CMakeLists.txt"
      - "CMakePresets.json"
      - .github/workflows/**
      - .github/workflows/cmake.yml
      - vcpkg.json
      - "!**/Makefile*"

jobs:
  msys2:
    if: ${{ false }}  # disable for now
    name: "Windows MSYS2 (${{ matrix.ui.name }}, ${{ matrix.build.name }}, ${{ matrix.dynarec.name }}, ${{ matrix.environment.msystem }})"

    runs-on: windows-2022

    defaults:
      run:
        shell: msys2 {0}

    strategy:
      fail-fast: true
      matrix:
        build:
          - name: Debug
            preset: debug
            slug: -Debug
          - name: Dev
            preset: experimental
            slug: -Dev
        dynarec:
          - name: ODR
            new: off
            slug: -ODR
          - name: NDR
            new: on
            slug: -NDR
        ui:
          - name: Win32 GUI
            qt: off
            static: on
          - name: Qt GUI
            qt: on
            static: off
            slug: -Qt
            packages: >-
              qt5-base:p
              qt5-tools:p
        environment:
          - msystem: MINGW32
            prefix: mingw-w64-i686
            toolchain: ./cmake/flags-gcc-i686.cmake
          - msystem: MINGW64
            prefix: mingw-w64-x86_64
            toolchain: ./cmake/flags-gcc-x86_64.cmake
          - msystem: UCRT64
            prefix: mingw-w64-ucrt-x86_64
            toolchain: ./cmake/flags-gcc-x86_64.cmake

    steps:
      - name: Prepare MSYS2 environment
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.environment.msystem }}
          pacboy: >-
            ninja:p
            cmake:p
            gcc:p
            pkg-config:p
            freetype:p
            SDL2:p
            zlib:p
            libpng:p
            openal:p
            rtmidi:p
            libvncserver:p
            ${{ matrix.ui.packages }}
      - uses: actions/checkout@v3
      - name: Configure CMake
        run: >-
          cmake -G Ninja -S . -B build --preset ${{ matrix.build.preset }}
          --toolchain ${{ matrix.environment.toolchain }}
          -D NEW_DYNAREC=${{ matrix.dynarec.new }}
          -D CMAKE_INSTALL_PREFIX=./build/artifacts
          -D QT=${{ matrix.ui.qt }}
          -D STATIC_BUILD=${{ matrix.ui.static }}
          -D VNC=n
      - name: Build
        run: cmake --build build
      - name: Generate package
        run: cmake --install build
      - uses: actions/upload-artifact@v3
        with:
          name: '86Box${{ matrix.ui.slug }}${{ matrix.dynarec.slug }}${{ matrix.build.slug }}-Windows-${{ matrix.environment.msystem }}-gha${{ github.run_number }}'
          path: build/artifacts/**

  vs2015-arm:
    if: ${{ false }} # No longer supported by Github Actions
    name: VS2015 ${{ matrix.build.name }} ARM build (${{ matrix.toolset }})

    runs-on: windows-2016

    strategy:
      fail-fast: true
      matrix:
        build:
#        - name: Regular NDR
#          slug: -NDR
#          type: Release
#          dev-build: off
#          new-dynarec: on
#          strip: --strip
        - name: Debug NDR
          slug: -NDR-Debug
          type: Debug
          dev-build: off
          new-dynarec: on
        - name: Dev NDR
          slug: -NDR-Dev
          type: Debug
          dev-build: on
          new-dynarec: on
        toolset: ['v140', 'v141', 'v142']

    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        path: build/vcpkg_installed
        key: vcpkg-${{ hashFiles('vcpkg.json') }}-ARM
    - uses: microsoft/setup-msbuild@v1.1
    - name: Configure CMake
      run: >-
        cmake -S . -B build
        -G "Visual Studio 14 2015" -A ARM -T ${{ matrix.toolset }}
        -D CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake
        -D VCPKG_CHAINLOAD_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/llvm-win32-arm.cmake
        -D VCPKG_TARGET_TRIPLET=arm-windows-static
        -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/artifacts
        -D DEV_BRANCH=${{ matrix.build.dev-build }}
        -D NEW_DYNAREC=${{ matrix.build.new-dynarec }}
        -D OPENAL=OFF
        -D CPPTHREADS=OFF
    - name: Build
      run: cmake --build build --config ${{ matrix.build.type }} --target install
    - uses: actions/upload-artifact@v3
      with:
        name: '86Box-VS2015-${{ matrix.build.name }}-ARM-${{ matrix.toolset }}-${{ github.sha }}'
        path: build/artifacts/bin/**

  vs2017-arm:
    if: ${{ false }} # No longer supported by Github Actions
    name: VS2017 ${{ matrix.build.name }} ARM build (${{ matrix.toolset }})

    runs-on: windows-2016

    strategy:
      fail-fast: true
      matrix:
        build:
#        - name: Regular NDR
#          slug: -NDR
#          type: Release
#          dev-build: off
#          new-dynarec: on
#          strip: --strip
        - name: Debug NDR
          slug: -NDR-Debug
          type: Debug
          dev-build: off
          new-dynarec: on
        - name: Dev NDR
          slug: -NDR-Dev
          type: Debug
          dev-build: on
          new-dynarec: on
        toolset: ['v140', 'v141', 'v142']

    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        path: build/vcpkg_installed
        key: vcpkg-${{ hashFiles('vcpkg.json') }}-ARM
    - uses: microsoft/setup-msbuild@v1.1
    - name: Configure CMake
      run: >-
        cmake -S . -B build
        -G "Visual Studio 15 2017" -A ARM -T ${{ matrix.toolset }}
        -D CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake
        -D VCPKG_CHAINLOAD_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/llvm-win32-arm.cmake
        -D VCPKG_TARGET_TRIPLET=arm-windows-static
        -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/artifacts
        -D DEV_BRANCH=${{ matrix.build.dev-build }}
        -D NEW_DYNAREC=${{ matrix.build.new-dynarec }}
        -D OPENAL=OFF
        -D CPPTHREADS=OFF
    - name: Build
      run: cmake --build build --config ${{ matrix.build.type }} --target install
    - uses: actions/upload-artifact@v3
      with:
        name: '86Box-VS2017-${{ matrix.build.name }}-ARM-${{ matrix.toolset }}-${{ github.sha }}'
        path: build/artifacts/bin/**

  vs2019-arm:
    if: ${{ false }}  # disable for now
    name: VS2019 ${{ matrix.build.name }} ARM build (${{ matrix.toolset }})

    runs-on: windows-2019

    strategy:
      fail-fast: false
      matrix:
        build:
#        - name: Regular NDR
#          slug: -NDR
#          type: Release
#          dev-build: off
#          new-dynarec: on
#          strip: --strip
        - name: Debug NDR
          slug: -NDR-Debug
          type: Debug
          dev-build: off
          new-dynarec: on
        - name: Dev NDR
          slug: -NDR-Dev
          type: Debug
          dev-build: on
          new-dynarec: on
        toolset: ['v140', 'v141', 'v142']

    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        path: build/vcpkg_installed
        key: vcpkg-${{ hashFiles('vcpkg.json') }}-ARM
    - uses: microsoft/setup-msbuild@v1.1
    - name: Configure CMake
      run: >-
        cmake -S . -B build
        -G "Visual Studio 16 2019" -A ARM -T ${{ matrix.toolset }}
        -D CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake
        -D VCPKG_CHAINLOAD_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/llvm-win32-arm.cmake
        -D VCPKG_TARGET_TRIPLET=arm-windows-static
        -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/artifacts
        -D DEV_BRANCH=${{ matrix.build.dev-build }}
        -D NEW_DYNAREC=${{ matrix.build.new-dynarec }}
        -D OPENAL=OFF
        -D CPPTHREADS=OFF
    - name: Build
      run: cmake --build build --config ${{ matrix.build.type }} --target install
    - uses: actions/upload-artifact@v3
      with:
        name: '86Box-VS2019-${{ matrix.build.name }}-ARM-${{ matrix.toolset }}-${{ github.sha }}'
        path: build/artifacts/bin/**

  vs2022-arm:
    if: ${{ true }}  # disable for now
    name: VS2022 ${{ matrix.build.name }} ARM build (${{ matrix.toolset }})

    runs-on: windows-2022

    strategy:
      fail-fast: false
      matrix:
        build:
#        - name: Regular NDR
#          slug: -NDR
#          type: Release
#          dev-build: off
#          new-dynarec: on
#          strip: --strip
        - name: Debug NDR
          slug: -NDR-Debug
          type: Debug
          dev-build: off
          new-dynarec: on
        - name: Dev NDR
          slug: -NDR-Dev
          type: Debug
          dev-build: on
          new-dynarec: on
        toolset: ['v140', 'v141', 'v142', 'v143']

    steps:
    - name: Download and install Windows 8.1 SDK
      run: |
        import subprocess
        import urllib.request
        urllib.request.urlretrieve("https://go.microsoft.com/fwlink/p/?LinkId=323507", "sdksetup.exe")
        subprocess.run(["sdksetup.exe", "/q", "/norestart", "/features", "OptionId.WindowsDesktopSoftwareDevelopmentKit", "OptionId.NetFxSoftwareDevelopmentKit"], check=True, capture_output=True)
      shell: python
    - uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        path: build/vcpkg_installed
        key: vcpkg-${{ hashFiles('vcpkg.json') }}-ARM
    - uses: microsoft/setup-msbuild@v1.1
    - name: Configure CMake
      run: >-
        cmake -S . -B build
        -G "Visual Studio 17 2022" -A ARM -T ${{ matrix.toolset }}
        -D CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake
        -D VCPKG_CHAINLOAD_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/llvm-win32-arm.cmake
        -D VCPKG_TARGET_TRIPLET=arm-windows-static
        -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/artifacts
        -D DEV_BRANCH=${{ matrix.build.dev-build }}
        -D NEW_DYNAREC=${{ matrix.build.new-dynarec }}
        -D OPENAL=OFF
        -D CPPTHREADS=OFF
    - name: Build
      run: cmake --build build --config ${{ matrix.build.type }} --target install
    - uses: actions/upload-artifact@v3
      with:
        name: '86Box-VS2022-${{ matrix.build.name }}-ARM-${{ matrix.toolset }}-${{ github.sha }}'
        path: build/artifacts/bin/**

  llvm-windows:
    if: ${{ false }}  # disable for now
    name: "Windows vcpkg/LLVM (${{ matrix.ui.name }}, ${{ matrix.build.name }}, ${{ matrix.dynarec.name }}, ${{ matrix.target.name }})"

    runs-on: windows-2022

    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

    strategy:
      fail-fast: true
      matrix:
        build:
          - name: Debug
            preset: debug
            slug: -Debug
          - name: Dev
            preset: experimental
            slug: -Dev
        dynarec:
          - name: ODR
            new: off
            slug: -ODR
          - name: NDR
            new: on
            slug: -NDR
        ui:
          - name: Win32 GUI
            qt: off
          - name: Qt GUI
            qt: on
            slug: -Qt
        target:
          - name: x86
            triplet: x86-windows-static
            toolchain: ./cmake/llvm-win32-i686.cmake
            vcvars: x64_x86
          - name: x64
            triplet: x64-windows-static
            toolchain: ./cmake/llvm-win32-x86_64.cmake
            vcvars: x64
          - name: ARM64
            triplet: arm64-windows-static
            toolchain: ./cmake/llvm-win32-aarch64.cmake
            vcvars: x64_arm64
        exclude:
          - dynarec: 
              new: off
            target:
              name: ARM64

    steps:
      - name: Prepare VS environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.target.vcvars }}
      - name: Add LLVM to path
        run: echo "C:/Program Files/LLVM/bin" >> $env:GITHUB_PATH
      - name: Download Ninja
        run: >
          Invoke-WebRequest https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip -OutFile ninja-win.zip && 
          Expand-Archive ninja-win.zip -DestinationPath .
      - name: Setup NuGet Credentials
        run: >
          & (C:/vcpkg/vcpkg fetch nuget | tail -n 2)
          sources add
          -source "https://nuget.pkg.github.com/86Box/index.json"
          -storepasswordincleartext
          -name "GitHub"
          -username "86Box"
          -password "${{ secrets.GITHUB_TOKEN }}"
      - name: Fix MSVC atomic headers
        run: dir "C:/Program Files/Microsoft Visual Studio/2022/*/VC/Tools/MSVC/*/include" -include stdatomic.h -recurse | del
      - uses: actions/checkout@v3
      - name: Configure CMake
        run: >
          cmake -G Ninja -S . -B build --preset ${{ matrix.build.preset }}
          --toolchain C:/vcpkg/scripts/buildsystems/vcpkg.cmake
          -D NEW_DYNAREC=${{ matrix.dynarec.new }} -D QT=${{ matrix.ui.qt }}
          -D CMAKE_INSTALL_PREFIX=./build/artifacts
          -D VCPKG_CHAINLOAD_TOOLCHAIN_FILE=${{ github.workspace }}/${{ matrix.target.toolchain }}
          -D VCPKG_TARGET_TRIPLET=${{ matrix.target.triplet }}
          -D VCPKG_HOST_TRIPLET=x64-windows
          -D VCPKG_USE_HOST_TOOLS=ON
          -D QT=OFF
      - name: Fix Qt
        if: matrix.ui.qt == 'on'
        run: |
         $qtTargetsPath = "${{ github.workspace }}/build/vcpkg_installed/${{ matrix.target.triplet }}/share/Qt6/Qt6Targets.cmake"
         (Get-Content $qtTargetsPath) -replace "^.*-Zc:__cplusplus;-permissive-.*$","#$&" | Set-Content $qtTargetsPath
      - name: Reconfigure CMake
        if: matrix.ui.qt == 'on'
        run: cmake clean build
      - name: Build
        run: cmake --build build
      - name: Generate package
        run: cmake --install build
      - uses: actions/upload-artifact@v3
        with:
          name: '86Box${{ matrix.ui.slug }}${{ matrix.dynarec.slug }}${{ matrix.build.slug }}-Windows-LLVM-${{ matrix.target.name }}-gha${{ github.run_number }}'
          path: build/artifacts/**

  linux:
    if: ${{ false }}  # disable for now
    name: "Linux GCC 11 (${{ matrix.ui.name }}, ${{ matrix.build.name }}, ${{ matrix.dynarec.name }}, x86_64)"

    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        build:
          - name: Debug
            preset: debug
            slug: -Debug
          - name: Dev
            preset: experimental
            slug: -Dev
        dynarec:
          - name: ODR
            new: off
            slug: -ODR
          - name: NDR
            new: on
            slug: -NDR
        ui:
          - name: SDL GUI
            qt: off
            static: on
          - name: Qt GUI
            qt: on
            static: off
            slug: -Qt
            packages: >-
              qtbase5-dev
              qttools5-dev

    steps:
      - name: Install dependencies
        run: >-
          sudo apt update && sudo apt install
          build-essential
          ninja-build
          libfreetype-dev
          libsdl2-dev
          libpng-dev
          libc6-dev
          librtmidi-dev
          libopenal-dev
          ${{ matrix.ui.packages }}
      - uses: actions/checkout@v3
      - name: Configure CMake
        run: >-
          cmake -G Ninja -S . -B build --preset ${{ matrix.build.preset }}
          --toolchain ./cmake/flags-gcc-x86_64.cmake
          -D NEW_DYNAREC=${{ matrix.dynarec.new }}
          -D CMAKE_INSTALL_PREFIX=./build/artifacts
          -D QT=${{ matrix.ui.qt }}
      - name: Build
        run: cmake --build build
      - name: Generate package
        run: cmake --install build
      - uses: actions/upload-artifact@v3
        with:
          name: '86Box${{ matrix.ui.slug }}${{ matrix.dynarec.slug }}${{ matrix.build.slug }}-UbuntuJammy-x86_64-gha${{ github.run_number }}'
          path: build/artifacts/**

  macos10:
    if: ${{ false }}  # disable for now
    name: "macOS 10.15 (${{ matrix.ui.name }}, ${{ matrix.build.name }}, ${{ matrix.dynarec.name }}, x86_64)"

    runs-on: macos-10.15

    strategy:
      fail-fast: false
      matrix:
        build:
#         - name: Regular
#           preset: regular
          - name: Debug
            preset: debug
            slug: -Debug
          - name: Dev
            preset: experimental
            slug: -Dev
        dynarec:
          - name: ODR
            new: off
            slug: -ODR
          - name: NDR
            new: on
            slug: -NDR
        ui:
          - name: SDL GUI
            qt: off
            static: on
          - name: Qt GUI
            qt: on
            static: off
            slug: -Qt
            packages: >-
              qt@5

    steps:
      - name: Install dependencies
        run: >-
          brew install
          ninja
          freetype
          sdl2
          libpng
          rtmidi
          openal-soft
          ${{ matrix.ui.packages }}
      - uses: actions/checkout@v3
      - name: Configure CMake
        run: >-
          cmake -G Ninja -S . -B build --preset ${{ matrix.build.preset }}
          --toolchain ./cmake/flags-gcc-x86_64.cmake
          -D NEW_DYNAREC=${{ matrix.dynarec.new }}
          -D CMAKE_INSTALL_PREFIX=./build/artifacts
          -D QT=${{ matrix.ui.qt }}
          -D Qt5_ROOT=$(brew --prefix qt@5)
          -D Qt5LinguistTools_ROOT=$(brew --prefix qt@5)
          -D OpenAL_ROOT=$(brew --prefix openal-soft)
      - name: Build
        run: cmake --build build
      - name: Generate package
        run: cmake --install build
      - uses: actions/upload-artifact@v3
        with:
          name: '86Box${{ matrix.ui.slug }}${{ matrix.dynarec.slug }}${{ matrix.build.slug }}-macOS-x86_64-gha${{ github.run_number }}'
          path: build/artifacts/**

  macos11:
    if: ${{ false }}  # disable for now
    name: "macOS 11 (${{ matrix.ui.name }}, ${{ matrix.build.name }}, ${{ matrix.dynarec.name }}, x86_64)"

    runs-on: macos-11

    strategy:
      fail-fast: false
      matrix:
        build:
          - name: Debug
            preset: debug
            slug: -Debug
          - name: Dev
            preset: experimental
            slug: -Dev
        dynarec:
          - name: ODR
            new: off
            slug: -ODR
          - name: NDR
            new: on
            slug: -NDR
        ui:
          - name: SDL GUI
            qt: off
            static: on
          - name: Qt GUI
            qt: on
            static: off
            slug: -Qt
            packages: >-
              qt@5

    steps:
      - name: Install dependencies
        run: >-
          brew install
          ninja
          freetype
          sdl2
          libpng
          rtmidi
          openal-soft
          ${{ matrix.ui.packages }}
      - uses: actions/checkout@v3
      - name: Configure CMake
        run: >-
          cmake -G Ninja -S . -B build --preset ${{ matrix.build.preset }}
          --toolchain ./cmake/flags-gcc-x86_64.cmake
          -D NEW_DYNAREC=${{ matrix.dynarec.new }}
          -D CMAKE_INSTALL_PREFIX=./build/artifacts
          -D QT=${{ matrix.ui.qt }}
          -D Qt5_ROOT=$(brew --prefix qt@5)
          -D Qt5LinguistTools_ROOT=$(brew --prefix qt@5)
          -D OpenAL_ROOT=$(brew --prefix openal-soft)
      - name: Build
        run: cmake --build build
      - name: Generate package
        run: cmake --install build
      - uses: actions/upload-artifact@v3
        with:
          name: '86Box${{ matrix.ui.slug }}${{ matrix.dynarec.slug }}${{ matrix.build.slug }}-macOS-x86_64-gha${{ github.run_number }}'
          path: build/artifacts/**

  macos12:
    if: ${{ false }}  # disable for now
    name: "macOS 12 (${{ matrix.ui.name }}, ${{ matrix.build.name }}, ${{ matrix.dynarec.name }}, x86_64)"

    runs-on: macos-12

    strategy:
      fail-fast: false
      matrix:
        build:
          - name: Debug
            preset: debug
            slug: -Debug
          - name: Dev
            preset: experimental
            slug: -Dev
        dynarec:
          - name: ODR
            new: off
            slug: -ODR
          - name: NDR
            new: on
            slug: -NDR
        ui:
          - name: SDL GUI
            qt: off
            static: on
          - name: Qt GUI
            qt: on
            static: off
            slug: -Qt
            packages: >-
              qt@5

    steps:
      - name: Install dependencies
        run: >-
          brew install
          ninja
          freetype
          sdl2
          libpng
          rtmidi
          openal-soft
          ${{ matrix.ui.packages }}
      - uses: actions/checkout@v3
      - name: Configure CMake
        run: >-
          cmake -G Ninja -S . -B build --preset ${{ matrix.build.preset }}
          --toolchain ./cmake/flags-gcc-x86_64.cmake
          -D NEW_DYNAREC=${{ matrix.dynarec.new }}
          -D CMAKE_INSTALL_PREFIX=./build/artifacts
          -D QT=${{ matrix.ui.qt }}
          -D Qt5_ROOT=$(brew --prefix qt@5)
          -D Qt5LinguistTools_ROOT=$(brew --prefix qt@5)
          -D OpenAL_ROOT=$(brew --prefix openal-soft)
      - name: Build
        run: cmake --build build
      - name: Generate package
        run: cmake --install build
      - uses: actions/upload-artifact@v3
        with:
          name: '86Box${{ matrix.ui.slug }}${{ matrix.dynarec.slug }}${{ matrix.build.slug }}-macOS-x86_64-gha${{ github.run_number }}'
          path: build/artifacts/**
